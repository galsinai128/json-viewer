{"version":3,"sources":["components/InputUrl.js","components/TreeNode.js","api.js","App.js","reportWebVitals.js","index.js"],"names":["InputUrl","sendRequest","useState","inputText","setInputText","className","value","onChange","e","target","onClick","TreeNode","currentNode","isCollapsed","setIsCollapsed","nodeKeys","Object","keys","useEffect","isCollapsedKeys","map","nodeKey","assign","undefined","length","sign","event","stopPropagation","toString","axios","require","App","firstNode","setFirstNode","url","get","getJson","then","res","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAmBeA,MAhBf,YAAkC,IAAfC,EAAc,EAAdA,YAAc,EAECC,mBAAS,IAFV,mBAE1BC,EAF0B,KAEfC,EAFe,KAI/B,OACE,sBAAKC,UAAU,WAAf,UACE,qBAAKA,UAAU,QAAf,gFACA,uBAAOC,MAAOH,EAAWI,SAAU,SAACC,GAKtCJ,EALuDI,EAKpCC,OAAOH,UAJxB,wBAAQI,QAAS,kBAAIT,EAAYE,IAAjC,sB,MCiDSQ,MAxDf,SAASA,EAAT,GAAkC,IAAfC,EAAc,EAAdA,YAAc,EACSV,mBAAS,IADlB,mBACtBW,EADsB,KACTC,EADS,KAIzBC,EAAWH,EAAcI,OAAOC,KAAKL,GAAe,GAUxD,OARAM,qBAAU,WACN,IAAIC,EAAkB,GACtBJ,EAASK,KAAI,SAAAC,GACTF,EAAgBE,IAAW,KAE/BP,EAAeE,OAAOM,OAAO,GAAGH,MAClC,IAEkB,OAAhBP,QACgBW,IAAhBX,EAD6B,uCAG7BG,EAASS,OAEL,qBAAKnB,UAAU,OAAf,SACKU,EAASK,KAAI,SAAAC,GACV,IAAII,EAAOZ,EAAYQ,GAAW,SAAM,SACxC,MAAoC,kBAAzBT,EAAYS,GAEf,sBAAKX,QAAS,SAACgB,GACXA,EAAMC,kBACN,IAAIR,EAAkBH,OAAOM,OAAO,GAAGT,GACvCM,EAAgBE,IAAYF,EAAgBE,GAC5CP,EAAeE,OAAOM,OAAO,GAAGH,KAJpC,UAMI,8BAAMM,EAAO,IAAMJ,EAAU,QAC5BR,EAAYQ,GAAW,KAAO,cAAC,EAAD,CAAUT,YAAaA,EAAYS,QAGrC,oBAAzBT,EAAYS,GAEpB,sBAAKhB,UAAU,cAAf,UACI,+BAAOgB,EAAW,OAClB,+BAAOT,EAAYS,GAASO,gBAKhC,sBAAKvB,UAAU,cAAf,UACI,+BAAOgB,EAAW,OAClB,+BAAOT,EAAYS,aAOnC,MCxDVQ,G,MAAQC,EAAQ,KCkCPC,MA3Bf,WAAgB,IAAD,EAEqB7B,mBAAS,MAF9B,mBAEN8B,EAFM,KAEKC,EAFL,KAIb,OACE,sBAAK5B,UAAU,MAAf,UACE,cAAC,EAAD,CACEJ,YAQN,SAAqBiC,IDpBhB,SAAiBA,GACpB,OAAOL,EAAMM,IAAID,ICoBjBE,CAAQF,GAAKG,MAAK,SAAAC,GAChBL,EAAaK,MAEdC,OAAM,SAAA/B,GACLyB,EAAa,YAXZD,EAAY,cAAC,EAAD,CACXpB,YAAaoB,IACA,yDCNNQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBL,MAAK,YAAkD,IAA/CM,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9640fbd9.chunk.js","sourcesContent":["import {useState} from 'react'\nimport './InputUrl.css';\n\nfunction InputUrl({sendRequest}) {\n\nconst [inputText, setInputText] = useState('');\n\n  return (\n    <div className=\"inputUrl\">\n      <div className=\"title\">Please enter a url to retrive valid json and display in tree view:</div>\n      <input value={inputText} onChange={(e)=>handleChange(e)}></input>\n      <button onClick={()=>sendRequest(inputText)}>SEND</button>\n    </div>\n  );\n  function handleChange(event) {\n    setInputText(event.target.value);\n  }\n}\n\nexport default InputUrl;\n","import {useState, useEffect} from 'react'\nimport './TreeNode.css';\n\n\nfunction TreeNode({currentNode}) {\n    const [isCollapsed, setIsCollapsed] = useState({});\n\n\n    let nodeKeys = currentNode ? Object.keys(currentNode) : [];\n\n    useEffect(() => {\n        let isCollapsedKeys = {};\n        nodeKeys.map(nodeKey=> {\n            isCollapsedKeys[nodeKey] = true;\n        })\n        setIsCollapsed(Object.assign({},isCollapsedKeys))\n    },[]);\n\n    if (currentNode === null) return <div>null</div>\n    if (currentNode === undefined) return <div>null</div>\n\n    if (nodeKeys.length){\n        return (\n            <div className=\"Tree\">\n                {nodeKeys.map(nodeKey => { \n                    let sign = isCollapsed[nodeKey] ? '▲' : '▼';\n                    if (typeof currentNode[nodeKey] === 'object'){\n                        return (\n                            <div onClick={(event)=>{\n                                event.stopPropagation();\n                                let isCollapsedKeys = Object.assign({},isCollapsed);\n                                isCollapsedKeys[nodeKey] = !isCollapsedKeys[nodeKey];\n                                setIsCollapsed(Object.assign({},isCollapsedKeys))\n                            }}>\n                                <div>{sign + ' ' + nodeKey + ' : '}</div>\n                                {isCollapsed[nodeKey] ? null : <TreeNode currentNode={currentNode[nodeKey]}></TreeNode>}\n                            </div>)\n                    }\n                    else if (typeof currentNode[nodeKey] === 'function'){\n                        return (\n                            <div className=\"nodeNoChild\">\n                                <span>{nodeKey  + ': '}</span>\n                                <span>{currentNode[nodeKey].toString()}</span>\n                            </div>                            \n                        )\n                    }\n                    else return (\n                            <div className=\"nodeNoChild\">\n                                <span>{nodeKey  + ': '}</span>\n                                <span>{currentNode[nodeKey]}</span>\n                            </div>\n                        )\n                    })}\n            </div>\n            );\n    }\n    else return null\n\n}\n\nexport default TreeNode;\n","const axios = require('axios');\n\nexport function getJson(url){\n    return axios.get(url);\n    // return {\n    //     \"quiz\": {\n    //         \"sport\": {\n    //             \"q1\": {\n    //                 \"question\": \"Which one is correct team name in NBA?\",\n    //                 \"options\": [\n    //                     \"New York Bulls\",\n    //                     \"Los Angeles Kings\",\n    //                     \"Golden State Warriros\",\n    //                     \"Huston Rocket\"\n    //                 ],\n    //                 \"answer\": \"Huston Rocket\"\n    //             }\n    //         },\n    //         \"maths\": {\n    //             \"q1\": {\n    //                 \"question\": \"5 + 7 = ?\",\n    //                 \"options\": [\n    //                     \"10\",\n    //                     \"11\",\n    //                     \"12\",\n    //                     \"13\"\n    //                 ],\n    //                 \"answer\": \"12\"\n    //             },\n    //             \"q2\": {\n    //                 \"question\": \"12 - 8 = ?\",\n    //                 \"options\": [\n    //                     \"1\",\n    //                     \"2\",\n    //                     \"3\",\n    //                     \"4\"\n    //                 ],\n    //                 \"answer\": \"4\"\n    //             }\n    //         }\n    //     }\n    // }\n}","import {useState} from 'react'\n\nimport InputUrl from './components/InputUrl';\nimport TreeNode from './components/TreeNode';\nimport './App.css';\nimport {getJson} from './api'\n\nfunction App() {\n\n  const [firstNode, setFirstNode] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <InputUrl\n        sendRequest={sendRequest}\n      ></InputUrl>\n      {firstNode ? <TreeNode\n        currentNode={firstNode}\n      ></TreeNode> : <div>nothing to display</div>}\n    </div>\n  );\n\n  function sendRequest(url){\n    getJson(url).then(res => {\n      setFirstNode(res);\n    })\n    .catch(e => {\n      setFirstNode(null);\n    })\n    // let res = getJson();\n    // setFirstNode(res);\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}